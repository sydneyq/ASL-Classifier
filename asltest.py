# -*- coding: utf-8 -*-
"""ASLtest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DUf2agp1PANu51e0OP5JDlooZzn6CZ4C
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from IPython.display import Image
from sklearn.preprocessing import LabelBinarizer
# https://www.youtube.com/watch?v=xcBvcOXLu9A

!wget https://bashupload.com/OeVER/158Gg.zip
!unzip *zip

train = pd.read_csv('sign_mnist_train.csv')
test = pd.read_csv('sign_mnist_test.csv')

!unzip *.zip

train.head()

train.shape

labels = train['label'].values
train.drop('label', axis=1, inplace=True)
train.shape

lbz = LabelBinarizer()
labels = lbz.fit_transform(labels)
images = train.values
images = np.array([np.reshape(i, (28, 28)) for i in images])
images = np.array([i.flatten() for i in images])
plt.imshow(images[0].reshape(28,28))

from sklearn.model_selection import train_test_split

xtrain, xtest, ytrain, ytest = train_test_split(images, labels, test_size=0.3, random_state=101)

xtrain = xtrain / 225
xtest = xtest / 225
xtrain = xtrain.reshape(xtrain.shape[0], 28, 28, 1)
xtest = xtest.reshape(xtest.shape[0], 28, 28, 1)

import keras
from keras.models import Sequential
from keras.layers import Dense, Conv2D, MaxPooling2D, Flatten, Dropout

model = Sequential()
model.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(24, activation='softmax'))

model.compile(loss=keras.losses.categorical_crossentropy, optimizer=keras.optimizers.Adam(), metrics=['accuracy'])

model.fit(xtrain, ytrain, validation_data=(xtest, ytest), epochs=20, batch_size=128)

test_labels = test['label'].values
test.drop('label', axis=1, inplace=True)
test.shape

test_labels = lbz.fit_transform(test_labels)
test_images = test.values
test_images = np.array([np.reshape(i, (28, 28)) for i in test_images])
test_images = np.array([i.flatten() for i in test_images])
plt.imshow(test_images[0].reshape(28,28))
test_images = test_images.reshape(test_images.shape[0], 28, 28, 1)

pred = model.predict(test_images)

from sklearn.metrics import accuracy_score
accuracy_score(test_labels, pred.round())

plt.imshow(test_images[20].reshape(28, 28))

model.predict(test_images[20].reshape(1, 28, 28, 1))